---
const {
  href,
  size = 'md',
  variant = 'primary',
  rel,
  target,
  download,
} = Astro.props as {
  href: string;
  size?: 'sm' | 'md' | 'lg';
  variant?: 'primary' | 'secondary' | 'ghost';
  rel?: string;
  target?: string;
  download?: string | boolean;
};

if (!href) {
  throw new Error('CTAButton requires an href prop.');
}

const sizeClasses: Record<typeof size, string> = {
  sm: 'px-3 py-2 text-sm',
  md: 'px-4 py-2 text-base',
  lg: 'px-6 py-3 text-lg',
};

const variantClasses: Record<typeof variant, string> = {
  primary:
    'bg-[var(--color-accent)] text-[var(--color-text-on-accent)] hover:bg-[var(--color-accent-hover)]',
  secondary:
    'border border-[var(--color-accent)] text-[var(--color-accent)] hover:bg-[var(--color-accent)] hover:text-[var(--color-text-on-accent)]',
  ghost: 'text-[var(--color-accent)] hover:text-[var(--color-accent-hover)]',
};
---

<a
  class:list={[
    'inline-flex items-center justify-center rounded-full font-semibold transition-colors duration-150 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-[var(--color-focus)]',
    sizeClasses[size],
    variantClasses[variant],
  ]}
  href={href}
  rel={rel}
  target={target}
  download={download}
>
  <slot />
</a>
